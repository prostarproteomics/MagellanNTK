% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_shinyTree.R, R/mod_format_DT.R
\name{format_DT}
\alias{format_DT}
\alias{mod_shinyTree_ui}
\alias{mod_shinyTree_server}
\alias{format_DT_ui}
\alias{format_DT_server}
\title{format_DT_ui and format_DT_server}
\usage{
mod_shinyTree_ui(id)

mod_shinyTree_server(id, path)

format_DT_ui(id)

format_DT_server(
  id,
  data,
  withDLBtns = FALSE,
  showRownames = FALSE,
  dom = "Bt",
  hc_style = reactive({
     NULL
 }),
  full_style = reactive({
     NULL
 }),
  filename = "Prostar_export",
  hideCols = reactive({
     NULL
 })
)
}
\arguments{
\item{id}{shiny id}

\item{showRownames}{xxxx}

\item{dom}{xxx}

\item{filename}{xxx}

\item{input}{internal}

\item{output}{internal}

\item{session}{internal}

\item{withBtns}{xxx}

\item{style}{A list of four items:
* cols: a vector of colnames of columns to show,
* vals: a vector of colnames of columns that contain values,
* unique: unique(conds),
* pal: RColorBrewer::brewer.pal(3, "Dark2")[seq_len(2)]}
}
\description{
A shiny Module.

A shiny Module.
}
\examples{

if (interactive()){
library(shinyjqui)
library(DT)
library(shinyjs)
library(shiny)
  options(shiny.fullstacktrace = TRUE)
data(data_na)

ui <- fluidPage(
  tagList(
    format_DT_ui("dt_demo_nocolor"),
    br(),br(),br(),
    format_DT_ui("dt_demo_NA_colored"),
    br(),br(),br(),
    format_DT_ui("dt_demo_virtual_cols")
  )
)

server <- function(input, output, session) {

  # Example 1
  # # Show raw table
  format_DT_server("dt_demo_nocolor",
    data = reactive({data_na$array1})
  )

  # Example 2
  # Colorize NA values 
  .hc_style2 <- list(
    cols = colnames(data_na$array1),
    vals = colnames(data_na$array1),
    unique = c(NA),
    pal = 'lightgrey'
  )
  
  .full_style2 <- data_na$array1
  .full_style2[] <- 'white'
  .full_style2[is.na(data_na$array1)] <- 'orange'
  
  format_DT_server("dt_demo_NA_colored",
    data = reactive({data_na$array1}),
    withDLBtns = TRUE,
    hc_style = reactive({.hc_style2}),
    full_style = reactive({.full_style2})
  )


  #
  # # Example 3
  # # Compute values, store them in virtual columns and
  # # compute colors based on these virtual values
  # # Colorize cells wether their value is greater of lower than 10
  virtual_cols <- data_na$array1 < 10
  colnames(virtual_cols) <- paste0('virt_', colnames(data_na$array1))
  df <- cbind(data_na$array1, virtual_cols)

  .hc_style3 <- list(
    cols = colnames(df)[1:(ncol(df)/2)],
    vals = colnames(df)[(1+(ncol(df) / 2)):ncol(df)],
    unique = c(0,1),
    pal = c('orange', 'lightblue')
  )

  .full_style3 <- data_na$array1
  .full_style3[] <- 'white'
  .full_style3[data_na$array1 < 10] <- 'lightblue'
  .full_style3[data_na$array1 >= 10] <- 'orange'


  format_DT_server("dt_demo_virtual_cols",
    data = reactive({df}),
    withDLBtns = TRUE,
    hc_style = reactive({.hc_style3}),
    full_style = reactive({.full_style3}),
    hideCols = reactive({(1+((ncol(df)) / 2)):(ncol(df))})
  )
}

shinyApp(ui, server)
}

if (interactive()){
library(shinyjqui)
library(DT)
library(shinyjs)
library(shiny)
  options(shiny.fullstacktrace = TRUE)
data(data_na)

ui <- fluidPage(
  tagList(
    format_DT_ui("dt_demo_nocolor"),
    br(),br(),br(),
    format_DT_ui("dt_demo_NA_colored"),
    br(),br(),br(),
    format_DT_ui("dt_demo_virtual_cols")
  )
)

server <- function(input, output, session) {

  # Example 1
  # # Show raw table
  format_DT_server("dt_demo_nocolor",
    data = reactive({data_na$array1})
  )

  # Example 2
  # Colorize NA values 
  .hc_style2 <- list(
    cols = colnames(data_na$array1),
    vals = colnames(data_na$array1),
    unique = c(NA),
    pal = 'lightgrey'
  )
  
  .full_style2 <- data_na$array1
  .full_style2[] <- 'white'
  .full_style2[is.na(data_na$array1)] <- 'orange'
  
  format_DT_server("dt_demo_NA_colored",
    data = reactive({data_na$array1}),
    withDLBtns = TRUE,
    hc_style = reactive({.hc_style2}),
    full_style = reactive({.full_style2})
  )


  #
  # # Example 3
  # # Compute values, store them in virtual columns and
  # # compute colors based on these virtual values
  # # Colorize cells wether their value is greater of lower than 10
  virtual_cols <- data_na$array1 < 10
  colnames(virtual_cols) <- paste0('virt_', colnames(data_na$array1))
  df <- cbind(data_na$array1, virtual_cols)

  .hc_style3 <- list(
    cols = colnames(df)[1:(ncol(df)/2)],
    vals = colnames(df)[(1+(ncol(df) / 2)):ncol(df)],
    unique = c(0,1),
    pal = c('orange', 'lightblue')
  )

  .full_style3 <- data_na$array1
  .full_style3[] <- 'white'
  .full_style3[data_na$array1 < 10] <- 'lightblue'
  .full_style3[data_na$array1 >= 10] <- 'orange'


  format_DT_server("dt_demo_virtual_cols",
    data = reactive({df}),
    withDLBtns = TRUE,
    hc_style = reactive({.hc_style3}),
    full_style = reactive({.full_style3}),
    hideCols = reactive({(1+((ncol(df)) / 2)):(ncol(df))})
  )
}

shinyApp(ui, server)
}
}
\keyword{internal}
