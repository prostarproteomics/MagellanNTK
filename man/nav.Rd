% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nav.R
\name{nav}
\alias{nav}
\alias{nav_ui}
\alias{nav_server}
\title{The server() function of the module `nav`}
\usage{
nav_ui(id)

nav_server(
  id,
  dataIn = reactive({
     NULL
 }),
  is.enabled = reactive({
     TRUE
 }),
  remoteReset = reactive({
     FALSE
 }),
  is.skipped = reactive({
     FALSE
 }),
  tl.layout = NULL,
  verbose = FALSE,
  path = NULL
)
}
\arguments{
\item{id}{A `character(1)` which defines the id of the module. It is the same
as for the ui() function.}

\item{dataIn}{The dataset}

\item{is.enabled}{A `boolean`. This variable is a remote command to specify
if the corresponding module is enabled/disabled in the calling module of
upper level.
For example, if this module is part of a pipeline and the pipeline calculates
that it is disabled (i.e. skipped), then this variable is set to TRUE. Then,
all the widgets will be disabled. If not, the enabling/disabling of widgets
is deciding by this module.}

\item{remoteReset}{It is a remote command to reset the module. A boolen that
indicates is the pipeline has been reseted by a program of higher level
Basically, it is the program which has called this module}

\item{is.skipped}{xxx}

\item{tl.layout}{A vector of character ('h' for horizontal, 'v' for vertical)
where each item correspond to the orientation of the timeline for a given
level of navigation module.}

\item{verbose}{xxx}

\item{path}{xxx}
}
\value{
A list of four items:
* dataOut A dataset of the same class of the parameter dataIn
* steps.enabled A vector of `boolean` of the same length than config@steps
* status A vector of `integer(1)` of the same length than the config@steps
  vector
* reset xxxx
}
\description{
The module navigation can be launched via a Shiny app. 
This is the core module of MagellanNTK
}
\examples{
#if(interactive()){
  library(shiny)
  
  verbose <- TRUE
  
  path <- system.file('extdata/module_examples', package='MagellanNTK')
  
  
  # Uncomment and Change this for a process workflow
   name <- 'PipelineA_Process1'
   #name <- 'PipelineA_Description'
   layout <- c('h')
  
  
  # Uncomment and Change this for a pipeline workflow
  #name <- 'PipelineA'
  #layout <- c('v', 'h')
  
  
  
  
  ui <- fluidPage(
  tagList(
    selectInput('chooseDataset', 'Choose dataset', choices = c('None', 'data1', 'data_na')),
    uiOutput('UI'),
    uiOutput('debugInfos_ui')
  )
)

server <- function(input, output){
  
  data(data1)
  data(data_na)
  rv <- reactiveValues(
    dataIn = NULL,
    dataOut = NULL
  )
  
  
  observeEvent(input$chooseDataset, { 
    if (input$chooseDataset == 'None') rv$dataIn <- NULL
    else if (input$chooseDataset == 'data1') rv$dataIn <- data1
    else if (input$chooseDataset == 'data_na') rv$dataIn <- data_na
  })
  output$UI <- renderUI({nav_ui(name)})
  
  output$debugInfos_ui <- renderUI({
    req(verbose)
    Debug_Infos_ui('debug_infos')
  })
  
  Debug_Infos_server(id = 'debug_infos',
    title = 'Infos from shiny app',
    rv.dataIn = reactive({rv$dataIn}),
    dataOut = reactive({rv$dataOut$dataOut()})
  )
  
  observe({
    rv$dataOut <- nav_server(id = name,
      dataIn = reactive({rv$dataIn}),
      tl.layout = layout,
      verbose = verbose,
      path = path
      )
  })
}


shinyApp(ui, server)


#}

}
\author{
Samuel Wieczorek
}
